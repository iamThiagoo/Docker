Vis√£o Geral sobre Docker üíª


# Inicia o docker no Fedora
  - sudo service docker start


# Retorna a vers√£o utilizada
  - docker version


# docker ps ====> Retorna os container ativos
         ps -a ==> Retorna os status e status de todos os containers que est√£o ativos e inativos


# Executa container
  - docker run <nome_imagem>


# Deixa rodando o container e o terminal da aplica√ß√£o 
  - docker run -it <nome_imagem>


# Deixa executando o container em background
  - docker run -it -d <nome_imagem>


# Os containers s√£o isolados e n√£o possuem contato com nada do lado de fora, para isso se usa a tag -p para abrir uma porta
Algo √∫til caso queira usar o nginx por exemplo: docker run -d -p 80:80 nginx


# Parando container
  - docker stop <nome_usado_na_imagem> ===> Para um container em executa√ß√£o


# Renomeando container
  - docker run -d --name Nginx nginx ====> Com a tag name voc√™ poder√° setar o pr√≥prio nome do container


# Renomeando imagem
  - docker tag <id_imagem> meu_projeto


# Iniciando imagem com nome e tag
  - docker build -t meuubuntu:2.0.0 .


# Tag na imagem
  - docker tag <id_imagem> meu_projeto:1.0.0


# Para reiniciar um trabalho num container que foi parado √© necess√°rio usar: docker start <id_container>
  √â importante usar o start pois cada run iniciar√° um novo container


# Verificamos o que aconteceu dentro de um container
  - docker logs <id_container>


# Remove um container da m√°quina, se estiver sendo rodado utilize a tag -f (force) para par√°-lo
  - docker -rm <id_container>


# Retorna todas as imagens que est√£o instaladas no seu docker
  - docker images


# Instalar uma imagem no nosso docker
  - docker pull <imagem>


# Criando uma imagem
  - Criar apenas um arquivo no diret√≥rio intitulado "Dockerfile"
  - Utilizar as seguintes instru√ß√µes no arquivo: FROM, WORKDIR, COPY, RUN, CMD ...


# Rodando a imagem criada
  - docker build .                                   "Utilize o ponto se estiver dentro do diret√≥rio"
  - docker image ls                                  "Garanta que est√° tudo ok"
  - docker run -d -p 80:80 --name primeira imagem    "Utilize uma porta se necess√°rio e mude o nome do container"


# Removendo imagem
  - docker rmi -f <imagem>           "Pode ser usado a tag -f para for√ßar a remo√ß√£o caso o container esteja ligado!"


# Pedindo ajuda
  - docker COMMAND --help


# Removendo images, containers e networks que n√£o est√£o sendo utilizados (TEM LIGA QUE VAI REMOVER TUDO CARA!)
  - docker system prune


# Removendo autom√°ticamente ap√≥s o utilizar
  - docker run --rm <container>


# Copiando arquivos
  - docker cp <nome_container>:/<path> . /<new_path>/    "Esteja na mesma pasta quando for fazer essa c√≥pia"


# Verificando o processamento do container
  - docker top <nome_container>


# Inspecionando o container
  - docker inspect <nome_container>


# Verificando o processamento dos containers
  - docker stats 


## Autentica√ß√£o no Docker Hub
  - docker login
  - docker logout

## Enviar imagem ao Docker Hub
  - docker build -t <nome_user>/<nome_imagem> .
  - docker push <imagem>  "√â necess√°rio possuir um reposit√≥rio"

## Enviando atualiza√ß√£o
√â necess√°rio trocar apenas a tag para fazer a atualiza√ß√£o
  - docker build -t <nome_user>/<nome_imagem>:novaversao
  - docker push -t <nome_user>/<nome_imagem>:novaversao


## Volumes √© uma forma dev salvar dados em aplica√ß√µes para caso o container seja removido n√£o os perca Existem 3 tipo de volumes:
 - An√¥nimos (anonymous): Diret√≥rios criados com a flag -V, por√©m com nome aleat√≥rio;
   docker run -v /data

 - Nomeados(names) : Com nomes, assim podemos nos referir a eles facilmente;
   docker run -v nomedovolume:/data

 - Bind Mounts: Uma forma de salvar dados, sem o gerenciamento do Docker e iremos informar um diret√≥rio.
   docker run -v /dir/data/:/data
   Al√©m disso com o Bind Mount √© poss√≠vel atualizar em tempo real o nosso projeto

Com esse comando, podemos ver todos os volumes do nosso ambiente
 - docker volume ls     "Ir√° listar do tipo anonymous e named"

Criar volume de forma manual:
 - docker volume create <nome>
  Dessa forma estamos criando um volume do tipo named

Removendo um volume
 - docker volume rm <nome>  "CUIDADO! POIS TU VAI PERDER TUDO MANO"

Removendo os volumes que n√£o est√£o sendo utilizados
 - docker volume prune      "CUIDADO! TU VAI PERDER TUDO MANO!"

Criando volume apenas para leitura
 - docker run -v volume:/data:ro   "Abrevia√ß√£o de read only"


## Networks √© uma forma de gerenciar conex√µes do Docker com outras plataformas ou at√© mesmo entre containers

Para isso precisamos entender que os ccontainer costumam possuir 3 tipos de comunica√ß√£o: 
 - Externa: Com uma API de um servidor remoto
 - Com o host: Com a nossa m√°quina
 - Entre containers: Utiliza o drive bridge e permite a comunica√ß√£o entre dois ou mais containers

Tipos de drivers/redes:
 - Bridge: o mais comum e default do Docker;
 - Host: permite a conex√£o entre um container a uma maquina que est√° hosteando o Docker
 - Macvlan: permite a conex√£o a um container por um MAC address; 
 - none: remove todas as conex√µes de rede em um container;
 - plugins: permite extens√µes de terceiros para criar outras redes;

Listando todas as redes
 - docker network ls

Criando rede
 - network create <nome>      "Ser√° criado no estilo default = bridge"
Usando outro tipo de rede
 - network create -d macvlan <nome>

Removendo redes
 - docker network rm <nome>   "CUIDADO COM CONTAINER CONECTADOS"

Removendo redes n√£o utilizadas
 - docker network prune       "Iremos receber uma mensagem de confirma√ß√£o"